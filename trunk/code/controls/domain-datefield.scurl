||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author Naoto Miyazaki
|||

{define-class public DomainDateField {inherits CoreDateField , DomainControlInterface}
  
  {constructor public {default
                          domain:Domain = {Domain.from-type DateTime},
                          ui-object:#DateFieldUI = null,
                          value:#DateTime = null,
                          prompt:#String = null,
                          locale:#Locale = null,
                          calendar-control:CalendarControl = {CalendarControl takes-focus? = false},
                          ...
                      }
    
    {if not {domain.type.subtype-of? DateTime}
     then
        {error {lmessage "You must use DateTime Domain for DomainDateField."}}
    }
    
    {construct-super.DomainControlInterface domain,value}
    {construct-super.CoreDateField
        ui-object = ui-object,
        min-value = domain.min-allowable asa #DateTime,
        max-value = domain.max-allowable asa #DateTime,
        prompt = prompt,
        locale = locale,
        calendar-control = calendar-control,
        {splice ...}
    }
    
    
  }
    
  {setter public {native-value value:any}:void
    
    set self.value = value asa DateTime
    
  }
    
  {getter public {native-value}:any
    
    {return self.value}
    
  }
    
  {method public {get-formatted-data data:DateTime}:String
    
    {return {self.domain.format data}}
    
  }
    
  {method public {get-parsed-value
                     val:String,
                     require-four-digit-year?:bool = false
                 }:(date:DateTime, day-start-pos:int, day-end-pos:int, month-start-pos:int, month-end-pos:int, year-start-pos:int, year-end-pos:int)
    
    let new-value:#DateTime
    
    {try
        set new-value = {self.domain.parse val} asa DateTime
     catch e:Exception do
        set new-value = {super.get-parsed-value val , require-four-digit-year? = require-four-digit-year?}
    }
    
    {return
        {unchecked-non-null new-value},
        0,
        0,
        0,
        0,
        0,
        0
    }
    
  }
  
}