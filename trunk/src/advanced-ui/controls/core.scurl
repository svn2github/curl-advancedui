||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author Hitoshi Okada, Naoto Miyazaki
|||

||
|| CoreTextField
||  - guide prompt
{define-class public open CoreTextField
  {inherits TextField}

  field constant private prompt-helper:GuidePromptHelper

  {constructor public {default
                          prompt:#String = null,
                          prompt-color:FillPattern = "grey",
                          prompt-background:Background = "white",
                          ...
                      }

    {construct-super prompt = prompt, {splice ...}}

    || guide prompt
    set self.prompt-helper = 
        {GuidePromptHelper self, prompt-color, prompt-background}
  }

  || override
  {method public open {on-focus-in e:FocusIn}:void

    || guide prompt 
    {self.prompt-helper.do-focus-in}
  }

  {method public open {on-focus-out e:FocusOut}:void

    || guide prompt
    {self.prompt-helper.do-focus-out}
  }
}

||
|| CoreTextArea
||  - guide prompt
{define-class public open CoreTextArea
  {inherits TextArea}

  field constant private prompt-helper:GuidePromptHelper

  {constructor public {default
                          prompt:#String = null,
                          prompt-color:FillPattern = "grey",
                          prompt-background:Background = "white",
                          ...
                      }
    
    {construct-super prompt = prompt, {splice ...}}

    || guide prompt
    set self.prompt-helper = 
        {GuidePromptHelper self, prompt-color, prompt-background}
  }

  || override
  {method public open {on-focus-in e:FocusIn}:void

    || guide prompt
    {self.prompt-helper.do-focus-in}
  }

  || override
  {method public open {on-focus-out e:FocusOut}:void

    || guide prompt
    {self.prompt-helper.do-focus-out}
  }
}

||
|| CoreDateField
||  TODO: DatePicker(Change name.)
||  - guide prompt
||  - show CalendarControl automatically
{define-class public open CoreDateField
  {inherits DateField}

  field constant private prompt-helper:GuidePromptHelper

  {constructor public {default
                          prompt:#String = null,
                          prompt-color:FillPattern = "grey",
                          prompt-background:Background = "white",
                          ...
                      }

    {construct-super prompt = prompt, {splice ...}}

    || guide prompt
    set self.prompt-helper = 
        {GuidePromptHelper self, prompt-color, prompt-background}

    let spin-control:SpinControl =  self.focus-object asa SpinControl

    {if-non-null tf:TextField =
        {self.seek-graphic spin-control.graphical-children}
     then
        {tf.add-event-handler
            {on ValueChanged do
                {if (not tf.has-value?) or (tf.value.empty?)
                 then
                    {self.unset-value}
                    {self.handle-event {ValueChanged}}
                    {self.handle-event {ValueFinished}}
                }
            }
        }
    }
  }

  || override
  {method public open {on-focus-in e:FocusIn}:void

    || guide prompt
    {self.prompt-helper.do-focus-in}

    {if self.value == null then
        {self.show-calendar-button}
    }
    {super.on-focus-in e}
  }

  || override
  {method public open {on-focus-out e:FocusOut}:void

    || guide prompt
    {self.prompt-helper.do-focus-out}
  }


  || - - private - -

  || show CalendarButton
  {method private {show-calendar-button}:void
    {type-switch self.ui-object 
     case v:StandardDateFieldUI do
        || not styled controls
        def grid = {v.graphical-children.read-one} asa Grid
        {for gc in grid.graphical-children do
            {if gc isa Frame then || DropdownFrame
                def pp = {PointerPress}
                set pp.button = 1
                {gc.handle-event pp}
            }
        }
        
     case v:SkinnableDateFieldUI do
        || styled controls
        {if-non-null btn = {v.get-tagged-content "calendar-button"}
         then
            {btn.handle-event {Action}}
        }
    }
  }

  ||seek TextField in DateField
  {method private {seek-graphic ite:{Iterator-of Graphic}}:#TextField

    let result:#TextField = null

    {for g:Graphic in ite do
        {if g isa TextField
         then
            set result = g asa TextField
            {break}
         elseif g isa Box
         then
            set result = {self.seek-graphic (g asa Box).graphical-children}
            {if-non-null result
             then
                {break}
            }
        }
    }

    {return result}
    
  }
}

||
|| CoreComboBox
||  - guide prompt
||    TODO: We cannot implement GuidePrompt to ComboBox due to RTE6.0.3's bug.
{define-class public open CoreComboBox
  {inherits ComboBox}

  {constructor public {default ...}

    {construct-super {splice ...}}
  }
}

||
|| CoreCommandButton
||  - extra-mnemonic
{define-class public open CoreCommandButton
  {inherits CommandButton}

  || If key events occur, it will fire the Action event.
  || HACK! We can use KeyPressValue.value instead of extra-mnemonic?
  field public-get constant extra-mnemonic:#String

  {constructor public {default
                          extra-mnemonic:#String = null,
                          ...
                      }

    set self.extra-mnemonic = extra-mnemonic
    {construct-super 
        {splice ...}
    }

    || extra-mnemonic
    {if-non-null em = extra-mnemonic then
        {self.add-event-handler 
            {on e:AttachEvent at v:CoreCommandButton do
                {if-non-null focus-manager = {v.get-focus-manager} then
                    {focus-manager.add-key-accel 
                        {KeyAccel 
                            key-accel-string = em, 
                            {on Action do
                                {if self.enabled? then
                                    {self.handle-event {Action}}
                                }
                            }
                        }
                    }
                }
            }
        }
    }
  }
}

||
|| CoreTabPane
||
{define-class public open CoreTabPane
  {inherits TabPane}

  field private show-without-click?:bool 

  {constructor public {default 
                          show-without-click?:bool = true,
                          label:#Label = label, 
                          ...
                      }
    {construct-super label = label, {splice ...}}
    {if-non-null l = label then
        {l.add-event-handler
            {on e:PointerEnter at v:Label do
                def tab-container = self.tab-container
                {if not {tab-container.showing? self} then
                    {tab-container.show-pane self}
                 else
                    {type-switch tab-container
                     case tc:MultiTabAccordion do
                        {tc.hide-pane self}
                     else
                    }
                }
            }
        }
    }
  }
}
